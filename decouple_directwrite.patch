diff --git a/modules/juce_graphics/native/juce_Direct2DGraphicsContext_windows.cpp b/modules/juce_graphics/native/juce_Direct2DGraphicsContext_windows.cpp
index 091e828b56..5169441415 100644
--- a/modules/juce_graphics/native/juce_Direct2DGraphicsContext_windows.cpp
+++ b/modules/juce_graphics/native/juce_Direct2DGraphicsContext_windows.cpp
@@ -482,6 +482,7 @@ namespace juce
     protected:
         Direct2DGraphicsContext& owner;
         SharedResourcePointer<DirectX> directX;
+        SharedResourcePointer<DirectWrite> directWrite;
         float                                   dpiScalingFactor = 1.0f;
         juce::RectangleList<int> paintAreas;
 
@@ -715,12 +716,12 @@ namespace juce
 
         auto getDirectWriteFactory()
         {
-            return directX->directWrite.getFactory();
+            return directWrite->getFactory();
         }
 
         auto getSystemFonts()
         {
-            return directX->directWrite.getSystemFonts();
+            return directWrite->getSystemFonts();
         }
 
         auto& getFilledGeometryCache()
diff --git a/modules/juce_graphics/native/juce_Direct2DHwndContext_windows.cpp b/modules/juce_graphics/native/juce_Direct2DHwndContext_windows.cpp
index 4e3169b313..5d59dfa764 100644
--- a/modules/juce_graphics/native/juce_Direct2DHwndContext_windows.cpp
+++ b/modules/juce_graphics/native/juce_Direct2DHwndContext_windows.cpp
@@ -545,12 +545,12 @@ namespace juce
 
         auto getDirectWriteFactory()
         {
-            return directX->directWrite.getFactory();
+            return directWrite->getFactory();
         }
 
         auto getSystemFonts()
         {
-            return directX->directWrite.getSystemFonts();
+            return directWrite->getSystemFonts();
         }
 
         Image createSnapshot(direct2d::DPIScalableArea<int> scalableArea)
diff --git a/modules/juce_graphics/native/juce_DirectWriteTypeLayout_windows.cpp b/modules/juce_graphics/native/juce_DirectWriteTypeLayout_windows.cpp
index 4ad88f36a8..d59049cca0 100644
--- a/modules/juce_graphics/native/juce_DirectWriteTypeLayout_windows.cpp
+++ b/modules/juce_graphics/native/juce_DirectWriteTypeLayout_windows.cpp
@@ -511,10 +511,11 @@ bool TextLayout::createNativeLayout ([[maybe_unused]] const AttributedString& te
 
     jassert(MessageManager::getInstance()->currentThreadHasLockedMessageManager());
 
+    SharedResourcePointer<DirectWrite> directWrite;
     SharedResourcePointer<DirectX> directX;
     auto d2dFactory = directX->direct2D.getFactory();
-    auto directWriteFactory = directX->directWrite.getFactory();
-    auto systemFonts = directX->directWrite.getSystemFonts();
+    auto directWriteFactory = directWrite->getFactory();
+    auto systemFonts = directWrite->getSystemFonts();
     auto directWriteRenderTarget = directX->direct2D.getDirectWriteRenderTarget();
     if (d2dFactory != nullptr
         && directWriteFactory
diff --git a/modules/juce_graphics/native/juce_DirectWriteTypeface_windows.cpp b/modules/juce_graphics/native/juce_DirectWriteTypeface_windows.cpp
index 4fdd9bf672..cd0d820f1c 100644
--- a/modules/juce_graphics/native/juce_DirectWriteTypeface_windows.cpp
+++ b/modules/juce_graphics/native/juce_DirectWriteTypeface_windows.cpp
@@ -129,7 +129,7 @@ public:
         //
         // Get the DirectWrite font family for the raw data
         //
-        auto fontFamily = directX->directWrite.getFontFamilyForRawData(data, dataSize);
+        auto fontFamily = directWrite->getFontFamilyForRawData(data, dataSize);
         if (fontFamily == nullptr)
         {
             return;
@@ -252,7 +252,7 @@ public:
     float getUnitsToHeightScaleFactor() const noexcept      { return unitsToHeightScaleFactor; }
 
 private:
-    SharedResourcePointer<DirectX> directX;
+    SharedResourcePointer<DirectWrite> directWrite;
     ComSmartPtr<IDWriteFont> dwFont;
     ComSmartPtr<IDWriteFontFace> dwFontFace;
     float unitsToHeightScaleFactor = 1.0f, heightToPointsFactor = 1.0f, ascent = 0;
diff --git a/modules/juce_graphics/native/juce_DirectX_windows.cpp b/modules/juce_graphics/native/juce_DirectX_windows.cpp
index 142cf0d452..414b38c3b6 100644
--- a/modules/juce_graphics/native/juce_DirectX_windows.cpp
+++ b/modules/juce_graphics/native/juce_DirectX_windows.cpp
@@ -24,7 +24,7 @@ namespace juce
 // DirectWrite
 //
 
-DirectX::DirectWrite::DirectWrite()
+DirectWrite::DirectWrite()
 {
     JUCE_BEGIN_IGNORE_WARNINGS_GCC_LIKE("-Wlanguage-extension-token")
 
@@ -40,7 +40,7 @@ DirectX::DirectWrite::DirectWrite()
     }
 }
 
-DirectX::DirectWrite::~DirectWrite()
+DirectWrite::~DirectWrite()
 {
     if (directWriteFactory != nullptr)
     {
@@ -60,7 +60,7 @@ DirectX::DirectWrite::~DirectWrite()
     systemFonts = nullptr;
 }
 
-IDWriteFontFamily* DirectX::DirectWrite::getFontFamilyForRawData(const void* data, size_t dataSize)
+IDWriteFontFamily* DirectWrite::getFontFamilyForRawData(const void* data, size_t dataSize)
 {
     //
     // Hopefully the raw data here is pointing to a TrueType font file in memory.
diff --git a/modules/juce_graphics/native/juce_DirectX_windows.h b/modules/juce_graphics/native/juce_DirectX_windows.h
index 198572952f..f7c8b2d2e4 100644
--- a/modules/juce_graphics/native/juce_DirectX_windows.h
+++ b/modules/juce_graphics/native/juce_DirectX_windows.h
@@ -25,33 +25,33 @@ namespace juce
 
 class DirectWriteCustomFontCollectionLoader;
 
+//==============================================================================
+//
+// DirectWrite
+//
+
+class DirectWrite
+{
+public:
+    DirectWrite();
+    ~DirectWrite();
+
+    IDWriteFactory* getFactory() const { return directWriteFactory; }
+    IDWriteFontCollection* getSystemFonts() const { return systemFonts; }
+    IDWriteFontFamily* getFontFamilyForRawData(const void* data, size_t dataSize);
+    OwnedArray<DirectWriteCustomFontCollectionLoader>& getCustomFontCollectionLoaders() { return customFontCollectionLoaders; }
+
+private:
+    ComSmartPtr<IDWriteFactory> directWriteFactory;
+    ComSmartPtr<IDWriteFontCollection> systemFonts;
+    OwnedArray<DirectWriteCustomFontCollectionLoader> customFontCollectionLoaders;
+};
+
 struct DirectX
 {
     DirectX() = default;
     ~DirectX() = default;
 
-    //==============================================================================
-    //
-    // DirectWrite
-    //
-
-    class DirectWrite
-    {
-    public:
-        DirectWrite();
-        ~DirectWrite();
-
-        IDWriteFactory* getFactory() const { return directWriteFactory; }
-        IDWriteFontCollection* getSystemFonts() const { return systemFonts; }
-        IDWriteFontFamily* getFontFamilyForRawData(const void* data, size_t dataSize);
-        OwnedArray<DirectWriteCustomFontCollectionLoader>& getCustomFontCollectionLoaders() { return customFontCollectionLoaders; }
-
-    private:
-        ComSmartPtr<IDWriteFactory> directWriteFactory;
-        ComSmartPtr<IDWriteFontCollection> systemFonts;
-        OwnedArray<DirectWriteCustomFontCollectionLoader> customFontCollectionLoaders;
-    } directWrite;
-
     //==============================================================================
     //
     // Direct2D
@@ -220,7 +220,6 @@ struct DirectX
             Adapters(IDXGIFactory2* factory_) :
                 factory(factory_)
             {
-                updateAdapters();
             }
 
             ~Adapters()
@@ -266,7 +265,7 @@ struct DirectX
 
             IDXGIFactory2* getFactory() const { return factory; }
 
-            Adapter::Ptr const getAdapterForHwnd(HWND hwnd) const
+            Adapter::Ptr const getAdapterForHwnd(HWND hwnd)
             {
                 if (auto monitor = MonitorFromWindow(hwnd, MONITOR_DEFAULTTONULL))
                 {
@@ -289,7 +288,7 @@ struct DirectX
                 return getDefaultAdapter();
             }
 
-            Adapter::Ptr getDefaultAdapter() const
+            Adapter::Ptr getDefaultAdapter()
             {
                 return adapterArray.getFirst();
             }
diff --git a/modules/juce_graphics/native/juce_Fonts_windows.cpp b/modules/juce_graphics/native/juce_Fonts_windows.cpp
index 1890631830..b82a40cabc 100644
--- a/modules/juce_graphics/native/juce_Fonts_windows.cpp
+++ b/modules/juce_graphics/native/juce_Fonts_windows.cpp
@@ -170,8 +170,8 @@ StringArray Font::findAllTypefaceNames()
 {
     StringArray results;
 
-    SharedResourcePointer<DirectX> directX;
-    if (auto systemFonts = directX->directWrite.getSystemFonts())
+    SharedResourcePointer<DirectWrite> directWrite;
+    if (auto systemFonts = directWrite->getSystemFonts())
     {
         ComSmartPtr<IDWriteFontFamily> fontFamily;
         uint32 fontFamilyCount = 0;
@@ -217,8 +217,8 @@ StringArray Font::findAllTypefaceStyles (const String& family)
 
     StringArray results;
 
-    SharedResourcePointer<DirectX> directX;
-    if (auto systemFonts = directX->directWrite.getSystemFonts())
+    SharedResourcePointer<DirectWrite> directWrite;
+    if (auto systemFonts = directWrite->getSystemFonts())
     {
         BOOL fontFound = false;
         uint32 fontIndex = 0;
@@ -592,8 +592,8 @@ const MAT2 WindowsTypeface::identityMatrix = { { 0, 1 }, { 0, 0 }, { 0, 0 }, { 0
 
 Typeface::Ptr Typeface::createSystemTypefaceFor (const Font& font)
 {
-    SharedResourcePointer<DirectX> directX;
-    if (auto systemFonts = directX->directWrite.getSystemFonts())
+    SharedResourcePointer<DirectWrite> directWrite;
+    if (auto systemFonts = directWrite->getSystemFonts())
     {
         std::unique_ptr<WindowsDirectWriteTypeface> wtf (new WindowsDirectWriteTypeface (font, systemFonts));
 
